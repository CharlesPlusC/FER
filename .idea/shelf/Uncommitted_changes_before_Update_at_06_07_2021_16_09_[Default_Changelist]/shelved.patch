Index: video_to_frame_DAISEE.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># importing dependencies\r\nimport os\r\nimport glob\r\nimport cv2\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom deepface import DeepFace\r\n\r\n# TODO: make all of these into functions\r\n\r\n# ----------------------------------------------------------------------------#\r\n# SPLITTING VIDEOS INTO FRAMES\r\n\r\n\r\ndef split_v2f(PathIn = r'C:/Users/lizzy/OneDrive/Documents/Macbook Documents/COLLEGE/UCL/3rd year/Summer Project/DAiSEE_smol/Dataset/Videos/', PathOut = r'C:/Users/lizzy/OneDrive/Documents/Macbook Documents/COLLEGE/UCL/3rd year/Summer Project/DAiSEE_smol/Dataset/Frames/', required_frame_rate = 2 ):\r\n\r\n    # The frame rate that the film is recorded at -> Dependent on camera (usually 30)\r\n\r\n    video_frame_rate = 30\r\n\r\n    # Making a blank array that will be populated with the full paths of all videos\r\n    video_paths = []\r\n\r\n     # # Finding the name of all the video paths in the provided file structure\r\n    for filename in os.listdir(PathOut):\r\n           if filename.endswith('.jpg'):\r\n               print(\"Are you sure? The videos seem to have already been split.\")\r\n               break\r\n    else:\r\n    # do stuff if a file .true doesn't exist.\r\n        for folder in os.listdir(PathIn):\r\n            folder = PathIn + \"/\" + folder\r\n\r\n            for vid in os.listdir(folder):\r\n             vid = folder + \"/\" + vid\r\n\r\n            for video in os.listdir(vid):\r\n                video = vid + \"/\" + video\r\n            video_paths.append(video)\r\n\r\n        # using OpenCV to split all the videos specified into their component frames\r\n        vid_count = 1\r\n\r\n        for i in video_paths:\r\n                cap = cv2.VideoCapture(i)\r\n                vid_count+=1\r\n                success = True\r\n                frame_count = 1 #reset frame count to 1 at the start of every new video\r\n                while success:\r\n                    success, image = cap.read()\r\n                    print('read a new frame:',success)\r\n                    if frame_count %(video_frame_rate*required_frame_rate) == 0:\r\n                        cv2.imwrite(PathOut + 'video%d' % vid_count + 'frame%d.jpg' % frame_count, image)\r\n                    frame_count += 1\r\n\r\nprint(split_v2f())\r\n# TODO: make this code not end with an error\r\n\r\n\r\n\r\n# ----------------------------------------------------------------------------#\r\n# PUTTING THE FRAMES THROUGH DEEPFACE AND OUTPUTTING THEM AS PD DATAFRAMES#\r\n\r\n# making a loop that takes the frames from one video at a time, puts them into an array and passes them through deepface\r\nvideo_counter = 1\r\narray_counter = 1\r\nimg_array = []\r\ndfs = []\r\n\r\n# takes all the photos that contain the number of 'video_counter' and puts them through deepface\r\n# TODO: doing 10 videos for now but fix this so that it does len(all videos)\r\n\r\n# for some reason starting this loop at 0 or 1 gives me empty frames? maybe to do with the video counter starting at 1?\r\nfor i in range(2, 10, 1):\r\n    for filename in glob.glob(PathOut + 'video%d' % i + 'frame*.jpg'):\r\n        # Read in the relevant images\r\n        img = cv2.imread(filename)\r\n        height, width, layers = img.shape\r\n        size = (width, height)\r\n        img_array.append(img)\r\n    # Pass them through deepface\r\n    face_FER = DeepFace.analyze(img_path=img_array, actions=['emotion'], enforce_detection=False)\r\n    img_array = []\r\n    data = face_FER\r\n    # Turning arrays into pandas dataframes and labelling emotions\r\n\r\n    emotions = set()\r\n    # First we need to find out all unique emotions\r\n    for key, value in data.items():\r\n        for emotion in value['emotion'].keys():\r\n            emotions.add(emotion)\r\n\r\n    rows = []\r\n    columns = ['vid%d' % i + 'instance'] + list(emotions)\r\n\r\n    for key, value in data.items():\r\n        rows.append([0] * len(columns))  # Start creating a new row with zeros\r\n\r\n        key = key.split('_')[1]  # Get the 1,2,3 out of the instance\r\n        rows[-1][0] = key\r\n        for emotion, emotion_value in value['emotion'].items():\r\n            rows[-1][columns.index(emotion)] = emotion_value  # place the emotion in the correct index\r\n\r\n    df = pd.DataFrame(rows, columns=columns)\r\n    df.set_index('vid%d' % i + 'instance', inplace=True)\r\n    dfs.append(df)\r\n\r\n# ----------------------------------------------------------------------------#\r\n# TREATING THE DATA IN THE DATAFRAMES TO GET \"ENGAGEMENT\"\r\n\r\n# TODO: currently applying to all frames; make it so that we can split frames belonging to different individuals\r\n\r\n# Getting averages and rolling averages of positive-valence, negative-valence, and neutral emotions\r\nfor df in dfs:\r\n\r\n    # average of negative and positive valence emotions, and neutral\r\n    df['neg_valence_avg'] = np.mean(df[['fear', 'disgust', 'angry', 'sad']], axis=1)\r\n    df['pos_valence_avg'] = np.mean(df[['happy', 'surprise']], axis=1)\r\n    df['neutral_avg'] = np.mean(df[['neutral']], axis=1)\r\n\r\n    # Taking a rolling average of these (length of the rolling average = 2% the length of the dataframe(or 2 frames whichever is biggest))\r\n    while int(len(df) * 0.02) > 1:\r\n        three_percent_len = int(len(df) * 0.02)\r\n    else:\r\n        three_percent_len = 1\r\n\r\n    df['neg_valence_avg_roll'] = df['neg_valence_avg'].rolling(window=three_percent_len).mean()\r\n    df['pos_valence_avg_roll'] = df['pos_valence_avg'].rolling(window=three_percent_len).mean()\r\n    df['neutral_avg_roll'] = df['neutral_avg'].rolling(window=three_percent_len).mean()\r\n\r\n    # TODO: if we want to add graphs of emotion vs. time this is the place to do it\r\n\r\n# Making a dataframe that compares all the videos to eachother (no longer computing intra-video stats but inter-video)\r\n\r\nvalence_per_vid = []  # empty array to add inter-video analysis data\r\nvariance_per_vid = []\r\ntotal_vid_variance = []\r\n# list of median of positive emotions for each video\r\nfor df in dfs:\r\n    # list of median of pos,neg and neutral emotions for each video (one value for each video), and length of video\r\n    for participant in df:\r\n        valence_values = [(df['neg_valence_avg'].median()), df['pos_valence_avg'].median(),\r\n                          df['neutral_avg'].median(), len(df)]\r\n    variance_per_vid.append(df.iloc[:, 0:7].var())  # variance for each emotion in a video\r\n    # append these values to lists of lists\r\n    valence_per_vid.append(valence_values)\r\n\r\n# turning list of lists into a dataframe\r\nvideo_valence_df = pd.DataFrame(valence_per_vid, columns=[\"neg_avg_vid\", \"pos_avg_vid\", \"neutral_avg_vid\", \"vid_len\"])\r\n# valence for each emotion group and video length for each video\r\nvideo_variance_df = pd.DataFrame(variance_per_vid)  # variance for each emotion in each video\r\n\r\n# average variance of all emotions in any video (except neutral)\r\nall_vid_variance = video_variance_df[['happy', 'sad', 'angry', 'fear', 'disgust', 'surprise']].mean(axis=1)\r\nall_vid_variance_df = pd.DataFrame(all_vid_variance, columns = [\"variance_per_video\"])\r\n# average variance across all videos\r\ntotal_vid_variance = (all_vid_variance.mean())\r\nall_vid_variance_df[\"var_avg_all_vids\"] = total_vid_variance\r\n\r\n#merging the frames containing data on variance, valence and video length\r\n\r\nvideo_stats_df = pd.merge(all_vid_variance_df,video_valence_df,left_index=True, right_index=True)\r\n# TODO: fix this merge so that it does not merge on index. Need to add video_name as a column to both datasets and\r\n#  merge using that column. Sometimes index does weird things and we will have no way of knowing if it goes wrong.\r\nprint(video_stats_df)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/video_to_frame_DAISEE.py b/video_to_frame_DAISEE.py
--- a/video_to_frame_DAISEE.py	(revision 4f0ae974b90cc09203302c33340f5b6681878516)
+++ b/video_to_frame_DAISEE.py	(date 1625569458593)
@@ -12,7 +12,8 @@
 # SPLITTING VIDEOS INTO FRAMES
 
 
-def split_v2f(PathIn = r'C:/Users/lizzy/OneDrive/Documents/Macbook Documents/COLLEGE/UCL/3rd year/Summer Project/DAiSEE_smol/Dataset/Videos/', PathOut = r'C:/Users/lizzy/OneDrive/Documents/Macbook Documents/COLLEGE/UCL/3rd year/Summer Project/DAiSEE_smol/Dataset/Frames/', required_frame_rate = 2 ):
+def split_v2f(PathIn = r'C:/Users/ccons/OneDrive/Desktop/DAiSEE_smol/Dataset/Videos/',
+              PathOut = r'C:/Users/ccons/OneDrive/Desktop/DAiSEE_smol/Dataset/Videos/', required_frame_rate = 2 ):
 
     # The frame rate that the film is recorded at -> Dependent on camera (usually 30)
 
@@ -55,9 +56,6 @@
 
 print(split_v2f())
 # TODO: make this code not end with an error
-
-
-
 # ----------------------------------------------------------------------------#
 # PUTTING THE FRAMES THROUGH DEEPFACE AND OUTPUTTING THEM AS PD DATAFRAMES#
 
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.9 (FER)\" project-jdk-type=\"Python SDK\" />\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 4f0ae974b90cc09203302c33340f5b6681878516)
+++ b/.idea/misc.xml	(date 1625568005837)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9 (FER)" project-jdk-type="Python SDK" />
-</project>
+</project>
\ No newline at end of file
Index: .idea/FER.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.9 (FER)\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/FER.iml b/.idea/FER.iml
--- a/.idea/FER.iml	(revision 4f0ae974b90cc09203302c33340f5b6681878516)
+++ b/.idea/FER.iml	(date 1625568005825)
@@ -1,8 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$" />
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/venv" />
+    </content>
     <orderEntry type="jdk" jdkName="Python 3.9 (FER)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
-</module>
+</module>
\ No newline at end of file
Index: DeepFace_27_11_20.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"nbformat\": 4,\r\n  \"nbformat_minor\": 0,\r\n  \"metadata\": {\r\n    \"colab\": {\r\n      \"name\": \"DeepFaceTest.ipynb\",\r\n      \"provenance\": [],\r\n      \"collapsed_sections\": [],\r\n      \"mount_file_id\": \"1CEB8CMDAMzKUxYRMuh2P1QILRFvpDWsP\",\r\n      \"authorship_tag\": \"ABX9TyOnzws5F8d1xI7P829eNFVQ\",\r\n      \"include_colab_link\": true\r\n    },\r\n    \"kernelspec\": {\r\n      \"name\": \"python3\",\r\n      \"display_name\": \"Python 3\"\r\n    }\r\n  },\r\n  \"cells\": [\r\n    {\r\n      \"cell_type\": \"markdown\",\r\n      \"metadata\": {\r\n        \"id\": \"view-in-github\",\r\n        \"colab_type\": \"text\"\r\n      },\r\n      \"source\": [\r\n        \"<a href=\\\"https://colab.research.google.com/github/CharlesPlusC/FER/blob/master/DeepFace_27_11_20.ipynb\\\" target=\\\"_parent\\\"><img src=\\\"https://colab.research.google.com/assets/colab-badge.svg\\\" alt=\\\"Open In Colab\\\"/></a>\"\r\n      ]\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"metadata\": {\r\n        \"id\": \"OVZp1puGs0F2\"\r\n      },\r\n      \"source\": [\r\n        \"from deepface import DeepFace\\n\",\r\n        \"import matplotlib.pyplot as plt\\n\",\r\n        \"import matplotlib.image as mpimg\\n\",\r\n        \"import cv2\\n\",\r\n        \"import numpy as np\"\r\n      ],\r\n      \"execution_count\": 1,\r\n      \"outputs\": []\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"metadata\": {\r\n        \"id\": \"MKVhzcjoMYJe\"\r\n      },\r\n      \"source\": [\r\n        \"#facial analysis\\n\",\r\n        \"import json\\n\",\r\n        \"from deepface.extendedmodels import Age, Gender, Race, Emotion\\n\",\r\n        \"models = {}\\n\",\r\n        \"models[\\\"emotion\\\"] = Emotion.loadModel()\\n\",\r\n        \"models[\\\"age\\\"] = Age.loadModel()\\n\",\r\n        \"models[\\\"gender\\\"] = Gender.loadModel()\\n\",\r\n        \"models[\\\"race\\\"] = Race.loadModel()\"\r\n      ],\r\n      \"execution_count\": 2,\r\n      \"outputs\": []\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"metadata\": {\r\n        \"colab\": {\r\n          \"base_uri\": \"https://localhost:8080/\"\r\n        },\r\n        \"id\": \"ONH2jLHvy1Hb\",\r\n        \"outputId\": \"265c3518-c768-4ca6-b412-7b8b1d178b60\"\r\n      },\r\n      \"source\": [\r\n        \"DeepFace.analyze(\\\"/content/metest4.jpeg\\\", models=models)\"\r\n      ],\r\n      \"execution_count\": 4,\r\n      \"outputs\": [\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"text\": [\r\n            \"Action: emotion:   0%|          | 0/4 [00:00<?, ?it/s]\"\r\n          ],\r\n          \"name\": \"stderr\"\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"text\": [\r\n            \"already built emotion model is passed\\n\",\r\n            \"already built gender model is passed\\n\",\r\n            \"already built race model is passed\\n\"\r\n          ],\r\n          \"name\": \"stdout\"\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"text\": [\r\n            \"Action: race:  75%|███████▌  | 3/4 [00:02<00:00,  1.35it/s]  \"\r\n          ],\r\n          \"name\": \"stderr\"\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"text\": [\r\n            \"WARNING:tensorflow:5 out of the last 5 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7f7f71ddd510> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\\n\"\r\n          ],\r\n          \"name\": \"stdout\"\r\n        },\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"text\": [\r\n            \"Action: race: 100%|██████████| 4/4 [00:03<00:00,  1.22it/s]\\n\"\r\n          ],\r\n          \"name\": \"stderr\"\r\n        },\r\n        {\r\n          \"output_type\": \"execute_result\",\r\n          \"data\": {\r\n            \"text/plain\": [\r\n              \"{'age': 28.808175263332743,\\n\",\r\n              \" 'dominant_emotion': 'happy',\\n\",\r\n              \" 'dominant_race': 'white',\\n\",\r\n              \" 'emotion': {'angry': 0.01812676346162334,\\n\",\r\n              \"  'disgust': 2.6663984797892226e-06,\\n\",\r\n              \"  'fear': 0.4790141712874174,\\n\",\r\n              \"  'happy': 79.06026244163513,\\n\",\r\n              \"  'neutral': 19.477203488349915,\\n\",\r\n              \"  'sad': 0.9532932192087173,\\n\",\r\n              \"  'surprise': 0.012093986151739955},\\n\",\r\n              \" 'gender': 'Man',\\n\",\r\n              \" 'race': {'asian': 0.49889505089193886,\\n\",\r\n              \"  'black': 0.19093819402162396,\\n\",\r\n              \"  'indian': 1.036182759623692,\\n\",\r\n              \"  'latino hispanic': 18.167122791237997,\\n\",\r\n              \"  'middle eastern': 24.966758487627416,\\n\",\r\n              \"  'white': 55.14010519624384}}\"\r\n            ]\r\n          },\r\n          \"metadata\": {\r\n            \"tags\": []\r\n          },\r\n          \"execution_count\": 4\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"metadata\": {\r\n        \"id\": \"C4Xa8vjztKAa\",\r\n        \"colab\": {\r\n          \"base_uri\": \"https://localhost:8080/\"\r\n        },\r\n        \"outputId\": \"94c6e9c6-c209-4264-d38e-1441dd3e9251\"\r\n      },\r\n      \"source\": [\r\n        \"# result - DeepFace.verify\\n\",\r\n        \"cam = '/content/metest4.jpeg'\\n\",\r\n        \"attributes = [\\\"emotion\\\"]\\n\",\r\n        \"\\n\",\r\n        \"demography = DeepFace.analyze(cam,attributes)\\n\",\r\n        \"\\n\",\r\n        \"# demography = DeepFace.analyze(testboi, actions = ['age', 'gender', 'race', 'dominant_emotion'])\\n\",\r\n        \"# print(\\\"Age: \\\", demography[\\\"age\\\"])\\n\",\r\n        \"# print(\\\"Gender: \\\", demography[\\\"gender\\\"])\\n\",\r\n        \"# print(\\\"Emotion: \\\", demography[\\\"dominant_emotion\\\"])\\n\",\r\n        \"# print(\\\"Race: \\\", demography[\\\"dominant_race\\\"])\"\r\n      ],\r\n      \"execution_count\": 5,\r\n      \"outputs\": [\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"text\": [\r\n            \"WARNING:tensorflow:6 out of the last 6 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7f7f7444a730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\\n\"\r\n          ],\r\n          \"name\": \"stdout\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"metadata\": {\r\n        \"id\": \"hLnnLPZRwtp5\",\r\n        \"colab\": {\r\n          \"base_uri\": \"https://localhost:8080/\"\r\n        },\r\n        \"outputId\": \"a72aa9ba-0603-4b58-ab1e-a6eab3d19d6f\"\r\n      },\r\n      \"source\": [\r\n        \"print(demography)\"\r\n      ],\r\n      \"execution_count\": 6,\r\n      \"outputs\": [\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"text\": [\r\n            \"{'emotion': {'angry': 0.01812676346162334, 'disgust': 2.6663984797892226e-06, 'fear': 0.4790141712874174, 'happy': 79.06026244163513, 'sad': 0.9532932192087173, 'surprise': 0.012093986151739955, 'neutral': 19.477203488349915}, 'dominant_emotion': 'happy'}\\n\"\r\n          ],\r\n          \"name\": \"stdout\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"cell_type\": \"code\",\r\n      \"metadata\": {\r\n        \"id\": \"rMpEgpvhwv8I\",\r\n        \"colab\": {\r\n          \"base_uri\": \"https://localhost:8080/\",\r\n          \"height\": 323\r\n        },\r\n        \"outputId\": \"fbf4dc36-d0df-4ef4-b982-03cf6ae02fd1\"\r\n      },\r\n      \"source\": [\r\n        \"#setting image resizing parameters\\n\",\r\n        \"WIDTH = 48\\n\",\r\n        \"HEIGHT = 48\\n\",\r\n        \"x=None\\n\",\r\n        \"y=None\\n\",\r\n        \"labels = ['Angry', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']\\n\",\r\n        \"\\n\",\r\n        \"#loading image\\n\",\r\n        \"img = cv2.imread(cam)\\n\",\r\n        \"gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\\n\",\r\n        \"face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\\n\",\r\n        \"faces = face_cascade.detectMultiScale(gray, 1.3, 5)\\n\",\r\n        \"# print(faces)\\n\",\r\n        \"# print(gray)\\n\",\r\n        \"\\n\",\r\n        \"#detecting faces\\n\",\r\n        \"for (x,y,w,h) in faces:\\n\",\r\n        \"    roi_gray = gray[y:y + h, x:x + w]\\n\",\r\n        \"    cropped_img = np.expand_dims(np.expand_dims(cv2.resize(roi_gray, (48, 48)), -1), 0)\\n\",\r\n        \"    cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,0),5)\\n\",\r\n        \"    cv2.normalize(cropped_img, cropped_img, alpha=0, beta=1, norm_type=cv2.NORM_L2, dtype=cv2.CV_32F)\\n\",\r\n        \"    \\n\",\r\n        \"  \\n\",\r\n        \"    #predicting the emotion\\n\",\r\n        \"    yhat= demography[\\\"emotion\\\"]\\n\",\r\n        \"    cv2.putText(img, labels[int(np.argmax(yhat))], (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 1, cv2.LINE_AA)\\n\",\r\n        \"    print(\\\"Emotion:\\\" + labels[int(np.argmax(yhat))])\\n\",\r\n        \"\\n\",\r\n        \"plt.grid(None)   \\n\",\r\n        \"plt.xticks([])\\n\",\r\n        \"plt.yticks([])\\n\",\r\n        \"plt.imshow(img)\\n\",\r\n        \"#when not in colabs use:\\n\",\r\n        \"#cv2.imshow(img)\\n\",\r\n        \"#plt.imshow(cropped_img)\\n\",\r\n        \"\\n\",\r\n        \"print (labels)\\n\",\r\n        \"print (yhat)\\n\",\r\n        \" #this returns the probability of each emotion\\n\"\r\n      ],\r\n      \"execution_count\": 7,\r\n      \"outputs\": [\r\n        {\r\n          \"output_type\": \"stream\",\r\n          \"text\": [\r\n            \"Emotion:Angry\\n\",\r\n            \"['Angry', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']\\n\",\r\n            \"{'angry': 0.01812676346162334, 'disgust': 2.6663984797892226e-06, 'fear': 0.4790141712874174, 'happy': 79.06026244163513, 'sad': 0.9532932192087173, 'surprise': 0.012093986151739955, 'neutral': 19.477203488349915}\\n\"\r\n          ],\r\n          \"name\": \"stdout\"\r\n        },\r\n        {\r\n          \"output_type\": \"display_data\",\r\n          \"data\": {\r\n            \"image/png\": \"\\n\",\r\n            \"text/plain\": [\r\n              \"<Figure size 432x288 with 1 Axes>\"\r\n            ]\r\n          },\r\n          \"metadata\": {\r\n            \"tags\": []\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DeepFace_27_11_20.ipynb b/DeepFace_27_11_20.ipynb
--- a/DeepFace_27_11_20.ipynb	(revision 4f0ae974b90cc09203302c33340f5b6681878516)
+++ b/DeepFace_27_11_20.ipynb	(date 1625568303780)
@@ -1,276 +1,165 @@
-{
-  "nbformat": 4,
-  "nbformat_minor": 0,
-  "metadata": {
-    "colab": {
-      "name": "DeepFaceTest.ipynb",
-      "provenance": [],
-      "collapsed_sections": [],
-      "mount_file_id": "1CEB8CMDAMzKUxYRMuh2P1QILRFvpDWsP",
-      "authorship_tag": "ABX9TyOnzws5F8d1xI7P829eNFVQ",
-      "include_colab_link": true
-    },
-    "kernelspec": {
-      "name": "python3",
-      "display_name": "Python 3"
-    }
-  },
-  "cells": [
-    {
-      "cell_type": "markdown",
-      "metadata": {
-        "id": "view-in-github",
-        "colab_type": "text"
-      },
-      "source": [
-        "<a href=\"https://colab.research.google.com/github/CharlesPlusC/FER/blob/master/DeepFace_27_11_20.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "OVZp1puGs0F2"
-      },
-      "source": [
-        "from deepface import DeepFace\n",
-        "import matplotlib.pyplot as plt\n",
-        "import matplotlib.image as mpimg\n",
-        "import cv2\n",
-        "import numpy as np"
-      ],
-      "execution_count": 1,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "MKVhzcjoMYJe"
-      },
-      "source": [
-        "#facial analysis\n",
-        "import json\n",
-        "from deepface.extendedmodels import Age, Gender, Race, Emotion\n",
-        "models = {}\n",
-        "models[\"emotion\"] = Emotion.loadModel()\n",
-        "models[\"age\"] = Age.loadModel()\n",
-        "models[\"gender\"] = Gender.loadModel()\n",
-        "models[\"race\"] = Race.loadModel()"
-      ],
-      "execution_count": 2,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "colab": {
-          "base_uri": "https://localhost:8080/"
-        },
-        "id": "ONH2jLHvy1Hb",
-        "outputId": "265c3518-c768-4ca6-b412-7b8b1d178b60"
-      },
-      "source": [
-        "DeepFace.analyze(\"/content/metest4.jpeg\", models=models)"
-      ],
-      "execution_count": 4,
-      "outputs": [
-        {
-          "output_type": "stream",
-          "text": [
-            "Action: emotion:   0%|          | 0/4 [00:00<?, ?it/s]"
-          ],
-          "name": "stderr"
-        },
-        {
-          "output_type": "stream",
-          "text": [
-            "already built emotion model is passed\n",
-            "already built gender model is passed\n",
-            "already built race model is passed\n"
-          ],
-          "name": "stdout"
-        },
-        {
-          "output_type": "stream",
-          "text": [
-            "Action: race:  75%|███████▌  | 3/4 [00:02<00:00,  1.35it/s]  "
-          ],
-          "name": "stderr"
-        },
-        {
-          "output_type": "stream",
-          "text": [
-            "WARNING:tensorflow:5 out of the last 5 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7f7f71ddd510> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"
-          ],
-          "name": "stdout"
-        },
-        {
-          "output_type": "stream",
-          "text": [
-            "Action: race: 100%|██████████| 4/4 [00:03<00:00,  1.22it/s]\n"
-          ],
-          "name": "stderr"
-        },
-        {
-          "output_type": "execute_result",
-          "data": {
-            "text/plain": [
-              "{'age': 28.808175263332743,\n",
-              " 'dominant_emotion': 'happy',\n",
-              " 'dominant_race': 'white',\n",
-              " 'emotion': {'angry': 0.01812676346162334,\n",
-              "  'disgust': 2.6663984797892226e-06,\n",
-              "  'fear': 0.4790141712874174,\n",
-              "  'happy': 79.06026244163513,\n",
-              "  'neutral': 19.477203488349915,\n",
-              "  'sad': 0.9532932192087173,\n",
-              "  'surprise': 0.012093986151739955},\n",
-              " 'gender': 'Man',\n",
-              " 'race': {'asian': 0.49889505089193886,\n",
-              "  'black': 0.19093819402162396,\n",
-              "  'indian': 1.036182759623692,\n",
-              "  'latino hispanic': 18.167122791237997,\n",
-              "  'middle eastern': 24.966758487627416,\n",
-              "  'white': 55.14010519624384}}"
-            ]
-          },
-          "metadata": {
-            "tags": []
-          },
-          "execution_count": 4
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "C4Xa8vjztKAa",
-        "colab": {
-          "base_uri": "https://localhost:8080/"
-        },
-        "outputId": "94c6e9c6-c209-4264-d38e-1441dd3e9251"
-      },
-      "source": [
-        "# result - DeepFace.verify\n",
-        "cam = '/content/metest4.jpeg'\n",
-        "attributes = [\"emotion\"]\n",
-        "\n",
-        "demography = DeepFace.analyze(cam,attributes)\n",
-        "\n",
-        "# demography = DeepFace.analyze(testboi, actions = ['age', 'gender', 'race', 'dominant_emotion'])\n",
-        "# print(\"Age: \", demography[\"age\"])\n",
-        "# print(\"Gender: \", demography[\"gender\"])\n",
-        "# print(\"Emotion: \", demography[\"dominant_emotion\"])\n",
-        "# print(\"Race: \", demography[\"dominant_race\"])"
-      ],
-      "execution_count": 5,
-      "outputs": [
-        {
-          "output_type": "stream",
-          "text": [
-            "WARNING:tensorflow:6 out of the last 6 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7f7f7444a730> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/tutorials/customization/performance#python_or_tensor_args and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"
-          ],
-          "name": "stdout"
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "hLnnLPZRwtp5",
-        "colab": {
-          "base_uri": "https://localhost:8080/"
-        },
-        "outputId": "a72aa9ba-0603-4b58-ab1e-a6eab3d19d6f"
-      },
-      "source": [
-        "print(demography)"
-      ],
-      "execution_count": 6,
-      "outputs": [
-        {
-          "output_type": "stream",
-          "text": [
-            "{'emotion': {'angry': 0.01812676346162334, 'disgust': 2.6663984797892226e-06, 'fear': 0.4790141712874174, 'happy': 79.06026244163513, 'sad': 0.9532932192087173, 'surprise': 0.012093986151739955, 'neutral': 19.477203488349915}, 'dominant_emotion': 'happy'}\n"
-          ],
-          "name": "stdout"
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "rMpEgpvhwv8I",
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 323
-        },
-        "outputId": "fbf4dc36-d0df-4ef4-b982-03cf6ae02fd1"
-      },
-      "source": [
-        "#setting image resizing parameters\n",
-        "WIDTH = 48\n",
-        "HEIGHT = 48\n",
-        "x=None\n",
-        "y=None\n",
-        "labels = ['Angry', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']\n",
-        "\n",
-        "#loading image\n",
-        "img = cv2.imread(cam)\n",
-        "gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
-        "face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\n",
-        "faces = face_cascade.detectMultiScale(gray, 1.3, 5)\n",
-        "# print(faces)\n",
-        "# print(gray)\n",
-        "\n",
-        "#detecting faces\n",
-        "for (x,y,w,h) in faces:\n",
-        "    roi_gray = gray[y:y + h, x:x + w]\n",
-        "    cropped_img = np.expand_dims(np.expand_dims(cv2.resize(roi_gray, (48, 48)), -1), 0)\n",
-        "    cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,0),5)\n",
-        "    cv2.normalize(cropped_img, cropped_img, alpha=0, beta=1, norm_type=cv2.NORM_L2, dtype=cv2.CV_32F)\n",
-        "    \n",
-        "  \n",
-        "    #predicting the emotion\n",
-        "    yhat= demography[\"emotion\"]\n",
-        "    cv2.putText(img, labels[int(np.argmax(yhat))], (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 1, cv2.LINE_AA)\n",
-        "    print(\"Emotion:\" + labels[int(np.argmax(yhat))])\n",
-        "\n",
-        "plt.grid(None)   \n",
-        "plt.xticks([])\n",
-        "plt.yticks([])\n",
-        "plt.imshow(img)\n",
-        "#when not in colabs use:\n",
-        "#cv2.imshow(img)\n",
-        "#plt.imshow(cropped_img)\n",
-        "\n",
-        "print (labels)\n",
-        "print (yhat)\n",
-        " #this returns the probability of each emotion\n"
-      ],
-      "execution_count": 7,
-      "outputs": [
-        {
-          "output_type": "stream",
-          "text": [
-            "Emotion:Angry\n",
-            "['Angry', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']\n",
-            "{'angry': 0.01812676346162334, 'disgust': 2.6663984797892226e-06, 'fear': 0.4790141712874174, 'happy': 79.06026244163513, 'sad': 0.9532932192087173, 'surprise': 0.012093986151739955, 'neutral': 19.477203488349915}\n"
-          ],
-          "name": "stdout"
-        },
-        {
-          "output_type": "display_data",
-          "data": {
-            "image/png": "\n",
-            "text/plain": [
-              "<Figure size 432x288 with 1 Axes>"
-            ]
-          },
-          "metadata": {
-            "tags": []
-          }
-        }
-      ]
-    }
-  ]
-}
\ No newline at end of file
+# importing dependencies
+import os
+import glob
+import cv2
+import numpy as np
+import pandas as pd
+from deepface import DeepFace
+
+# TODO: make all of these into functions
+
+# ----------------------------------------------------------------------------#
+# SPLITTING VIDEOS INTO FRAMES
+
+
+def split_v2f(PathIn = 'C:/Users/ccons/OneDrive/Desktop/DAiSEE_smol/Dataset/Videos/', PathOut = r'C:/Users/lizzy/OneDrive/Documents/Macbook Documents/COLLEGE/UCL/3rd year/Summer Project/DAiSEE_smol/Dataset/Frames/', required_frame_rate = 2 ):
+
+    # The frame rate that the film is recorded at -> Dependent on camera (usually 30)
+
+    video_frame_rate = 30
+
+    # Making a blank array that will be populated with the full paths of all videos
+    video_paths = []
+
+     # # Finding the name of all the video paths in the provided file structure
+    for filename in os.listdir(PathOut):
+           if filename.endswith('.jpg'):
+               print("Are you sure? The videos seem to have already been split.")
+               break
+    else:
+    # do stuff if a file .true doesn't exist.
+        for folder in os.listdir(PathIn):
+            folder = PathIn + "/" + folder
+
+            for vid in os.listdir(folder):
+             vid = folder + "/" + vid
+
+            for video in os.listdir(vid):
+                video = vid + "/" + video
+            video_paths.append(video)
+
+        # using OpenCV to split all the videos specified into their component frames
+        vid_count = 1
+
+        for i in video_paths:
+                cap = cv2.VideoCapture(i)
+                vid_count+=1
+                success = True
+                frame_count = 1 #reset frame count to 1 at the start of every new video
+                while success:
+                    success, image = cap.read()
+                    print('read a new frame:',success)
+                    if frame_count %(video_frame_rate*required_frame_rate) == 0:
+                        cv2.imwrite(PathOut + 'video%d' % vid_count + 'frame%d.jpg' % frame_count, image)
+                    frame_count += 1
+
+print(split_v2f())
+# TODO: make this code not end with an error
+
+
+
+# ----------------------------------------------------------------------------#
+# PUTTING THE FRAMES THROUGH DEEPFACE AND OUTPUTTING THEM AS PD DATAFRAMES#
+
+# making a loop that takes the frames from one video at a time, puts them into an array and passes them through deepface
+video_counter = 1
+array_counter = 1
+img_array = []
+dfs = []
+
+# takes all the photos that contain the number of 'video_counter' and puts them through deepface
+# TODO: doing 10 videos for now but fix this so that it does len(all videos)
+
+# for some reason starting this loop at 0 or 1 gives me empty frames? maybe to do with the video counter starting at 1?
+for i in range(2, 10, 1):
+    for filename in glob.glob(PathOut + 'video%d' % i + 'frame*.jpg'):
+        # Read in the relevant images
+        img = cv2.imread(filename)
+        height, width, layers = img.shape
+        size = (width, height)
+        img_array.append(img)
+    # Pass them through deepface
+    face_FER = DeepFace.analyze(img_path=img_array, actions=['emotion'], enforce_detection=False)
+    img_array = []
+    data = face_FER
+    # Turning arrays into pandas dataframes and labelling emotions
+
+    emotions = set()
+    # First we need to find out all unique emotions
+    for key, value in data.items():
+        for emotion in value['emotion'].keys():
+            emotions.add(emotion)
+
+    rows = []
+    columns = ['vid%d' % i + 'instance'] + list(emotions)
+
+    for key, value in data.items():
+        rows.append([0] * len(columns))  # Start creating a new row with zeros
+
+        key = key.split('_')[1]  # Get the 1,2,3 out of the instance
+        rows[-1][0] = key
+        for emotion, emotion_value in value['emotion'].items():
+            rows[-1][columns.index(emotion)] = emotion_value  # place the emotion in the correct index
+
+    df = pd.DataFrame(rows, columns=columns)
+    df.set_index('vid%d' % i + 'instance', inplace=True)
+    dfs.append(df)
+
+# ----------------------------------------------------------------------------#
+# TREATING THE DATA IN THE DATAFRAMES TO GET "ENGAGEMENT"
+
+# TODO: currently applying to all frames; make it so that we can split frames belonging to different individuals
+
+# Getting averages and rolling averages of positive-valence, negative-valence, and neutral emotions
+for df in dfs:
+
+    # average of negative and positive valence emotions, and neutral
+    df['neg_valence_avg'] = np.mean(df[['fear', 'disgust', 'angry', 'sad']], axis=1)
+    df['pos_valence_avg'] = np.mean(df[['happy', 'surprise']], axis=1)
+    df['neutral_avg'] = np.mean(df[['neutral']], axis=1)
+
+    # Taking a rolling average of these (length of the rolling average = 2% the length of the dataframe(or 2 frames whichever is biggest))
+    while int(len(df) * 0.02) > 1:
+        three_percent_len = int(len(df) * 0.02)
+    else:
+        three_percent_len = 1
+
+    df['neg_valence_avg_roll'] = df['neg_valence_avg'].rolling(window=three_percent_len).mean()
+    df['pos_valence_avg_roll'] = df['pos_valence_avg'].rolling(window=three_percent_len).mean()
+    df['neutral_avg_roll'] = df['neutral_avg'].rolling(window=three_percent_len).mean()
+
+    # TODO: if we want to add graphs of emotion vs. time this is the place to do it
+
+# Making a dataframe that compares all the videos to eachother (no longer computing intra-video stats but inter-video)
+
+valence_per_vid = []  # empty array to add inter-video analysis data
+variance_per_vid = []
+total_vid_variance = []
+# list of median of positive emotions for each video
+for df in dfs:
+    # list of median of pos,neg and neutral emotions for each video (one value for each video), and length of video
+    for participant in df:
+        valence_values = [(df['neg_valence_avg'].median()), df['pos_valence_avg'].median(),
+                          df['neutral_avg'].median(), len(df)]
+    variance_per_vid.append(df.iloc[:, 0:7].var())  # variance for each emotion in a video
+    # append these values to lists of lists
+    valence_per_vid.append(valence_values)
+
+# turning list of lists into a dataframe
+video_valence_df = pd.DataFrame(valence_per_vid, columns=["neg_avg_vid", "pos_avg_vid", "neutral_avg_vid", "vid_len"])
+# valence for each emotion group and video length for each video
+video_variance_df = pd.DataFrame(variance_per_vid)  # variance for each emotion in each video
+
+# average variance of all emotions in any video (except neutral)
+all_vid_variance = video_variance_df[['happy', 'sad', 'angry', 'fear', 'disgust', 'surprise']].mean(axis=1)
+all_vid_variance_df = pd.DataFrame(all_vid_variance, columns = ["variance_per_video"])
+# average variance across all videos
+total_vid_variance = (all_vid_variance.mean())
+all_vid_variance_df["var_avg_all_vids"] = total_vid_variance
+
+#merging the frames containing data on variance, valence and video length
+
+video_stats_df = pd.merge(all_vid_variance_df,video_valence_df,left_index=True, right_index=True)
+# TODO: fix this merge so that it does not merge on index. Need to add video_name as a column to both datasets and
+#  merge using that column. Sometimes index does weird things and we will have no way of knowing if it goes wrong.
+print(video_stats_df)
